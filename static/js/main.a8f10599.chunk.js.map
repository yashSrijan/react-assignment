{"version":3,"sources":["_helpers/history.js","_constants/redux.contants.js","_helpers/constantData.js","components/Carousal.js","components/Home.js","containers/HomeContainer.js","_actions/redux.actions.js","components/Login.js","containers/LoginContainer.js","_helpers/dummyAPICall.js","components/Error.js","HOC/PrivateRoute.js","components/App.js","_reducers/auth.reducer.js","_reducers/selections.reducer.js","_helpers/store.js","_reducers/alert.reducer.js","_helpers/localStorage.js","index.js"],"names":["history","createBrowserHistory","LOGIN_REQUEST","LOGIN_SUCCESS","LOGIN_FAILURE","USER_LOGOUT","SUCCESS","ERROR","CLEAR","SET_SELECTION","credentials","selectOptions","Carousal","slideCount","slides","rand","Math","random","i","push","id","key","className","renderSlides","data-interval","href","role","data-slide","aria-hidden","Home","setSelections","selections","React","useState","setSlideCount","to","htmlFor","defaultValue","onChange","e","newSlideCount","target","value","map","numText","index","data-toggle","data-target","tabIndex","aria-labelledby","type","data-dismiss","aria-label","length","selection","connect","store","selectionsReducer","dispatch","num","payload","props","Login","handleChange","setState","name","submitLoginForm","preventDefault","state","username","password","login","logout","this","loggingIn","loggedIn","alertReducer","onSubmit","required","placeholder","message","disabled","Component","authenticationReducer","data","setTimeout","Promise","resolve","reject","errorMessage","dummyAPICall","then","response","loginsuccessful","catch","errorObj","loginFailure","error","userObj","loginSuccessful","Error","connectedComponent","user","component","rest","path","render","App","listen","clear","basename","process","exact","HomeContainer","LoginContainer","connectedApp","loaderReducer","initialState","appReducer","combineReducers","action","persistedStore","serializedState","sessionStorage","getItem","JSON","parse","err","loadState","createStore","undefined","applyMiddleware","logger","subscribe","currentState","getState","stringify","setItem","console","log","saveState","ReactDOM","document","getElementById"],"mappings":"0RAEaA,EAAUC,c,OCFPC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAgB,gBAChBC,EAAc,cAEhBC,EAAU,UACVC,EAAQ,QACRC,EAAQ,QAETC,EAAgB,gB,oBCThBC,EACE,SADFA,EAEE,MAGFC,EAAgB,CAAC,kBAAkB,MAAM,MAAM,QAAQ,OACpE,OAAO,MAAM,QAAQ,QAAQ,OAAO,MAAM,SAAS,SACnD,WAAY,WAAW,UAAU,UAAW,YAAY,WAAW,WAAW,UCJjEC,EAAW,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,WAkBlBC,EAhBiB,WACjB,IAAIC,EAAOC,KAAKC,SAAUH,EAAS,GACnC,GAAGD,EACC,IAAI,IAAIK,EAAI,EAAGA,EAAIL,EAAYK,IAC3BJ,EAAOK,KACH,yBAAKC,GAAML,EAAKG,EAAGG,IAAON,EAAKG,EAAGI,UAAS,wBAAwB,IAAJJ,EAAQ,SAAW,KAC9E,yBAAKI,UAAY,WACb,qCAAWX,EAAcO,EAAE,OAM/C,OAAOJ,EAGES,GACb,OACI,yBAAKD,UAAY,oBACb,yBAAKF,GAAG,0BAA0BE,UAAU,iBAAiBE,gBAAc,SACvE,yBAAKF,UAAU,kBACVR,GAEL,uBAAGQ,UAAU,wBAAwBG,KAAK,2BAA2BC,KAAK,SAASC,aAAW,QAC1F,0BAAML,UAAU,6BAA6BM,cAAY,SACzD,0BAAMN,UAAU,WAAhB,aAEJ,uBAAGA,UAAU,wBAAwBG,KAAK,2BAA2BC,KAAK,SAASC,aAAW,QAC1F,0BAAML,UAAU,6BAA6BM,cAAY,SACzD,0BAAMN,UAAU,WAAhB,YC5BPO,EAAO,SAAC,GAAiC,IAAhCC,EAA+B,EAA/BA,cAAeC,EAAgB,EAAhBA,WAAgB,EAGbC,IAAMC,SAAS,GAHF,mBAG1CpB,EAH0C,KAG9BqB,EAH8B,KAcjD,OACI,yBAAKd,GAAK,QAGN,yBAAKE,UAAY,WACb,kBAAC,IAAD,CAAMA,UAAU,kBAAkBa,GAAI,SAAST,KAAK,UAApD,YAIJ,yBAAKJ,UAAY,kBACb,yBAAKA,UAAY,cACb,2BAAOc,QAAQ,aAAf,2BACA,4BAAQd,UAAU,eAAee,aAAe1B,EAAc,GAAKS,GAAG,YAAYkB,SArBvE,SAACC,GACxB,IAAIC,EAAgBD,EAAEE,OAAOC,MAC1BF,EAAc,GAEbV,EAAcU,GAElBN,EAAcM,KAiBM7B,EAAcgC,IAAI,SAACC,EAASC,GAAV,OACJ,IAAVA,EAAc,4BAAQxB,IAAOwB,EAAOH,MAAOG,GAAQD,GACnD,4BAAQvB,IAAOwB,EAAOH,MAAOG,GAAQA,QASrDhC,EAAa,GACb,kBAAC,EAAD,CAAUA,WAAcA,IAI5B,4BAAQS,UAAY,kBAAkBwB,cAAY,QAAQC,cAAY,oBAAtE,UAEA,yBAAKzB,UAAU,aAAaF,GAAG,kBAAkB4B,SAAS,KAAKtB,KAAK,SAASuB,kBAAgB,uBAAuBrB,cAAY,QAC5H,yBAAKN,UAAU,eAAeI,KAAK,YAC/B,yBAAKJ,UAAU,iBACX,yBAAKA,UAAU,gBACX,wBAAIA,UAAU,cAAcF,GAAG,4BAA/B,mBACA,4BAAQ8B,KAAK,SAAS5B,UAAU,QAAQ6B,eAAa,QAAQC,aAAW,SACpE,0BAAMxB,cAAY,QAAlB,UAGR,yBAAKN,UAAU,cAGPS,EAAWsB,OACPtB,EAAWY,IAAK,SAACW,EAAWT,GAAZ,OACZ,0BAAMxB,IAAOwB,GACRS,EACAT,IAAUd,EAAWsB,OAAO,EAAI,GAAK,IAF1C,UAMN,2BCnDnBE,cAdS,SAACC,GACrB,MAAO,CACHzB,WAAayB,EAAMC,kBAAkB1B,aAIlB,SAAC2B,GACxB,MAAO,CACH5B,cAAgB,SAAS6B,GACrBD,ECWD,CACHR,KAAOzC,EACPmD,QDb2BD,OAKpBJ,CAhBO,SAACM,GAAD,OAAW,kBAAC,EAASA,K,QEF9BC,EAAb,YAEI,WAAYD,GAAQ,IAAD,8BACf,4CAAMA,KAQVE,aAAe,SAACxB,GAAD,OAAO,EAAKyB,SAAL,eAAiBzB,EAAEE,OAAOwB,KAAQ1B,EAAEE,OAAOC,SAT9C,EAWnBwB,gBAAkB,SAAC3B,GACfA,EAAE4B,iBADmB,MAEQ,EAAKC,MAA3BC,EAFc,EAEdA,SAAUC,EAFI,EAEJA,SACjB,EAAKT,MAAMU,MAAM,CAACF,WAAUC,cAZ5B,EAAKT,MAAMW,SACX,EAAKJ,MAAQ,CACTC,SAAW,GACXC,SAAW,IALA,EAFvB,sEAmBc,IAAD,SACuCG,KAAKZ,MAA1Ca,EADF,EACEA,UAAWC,EADb,EACaA,SAAUC,EADvB,EACuBA,aAC5B,OAAGD,EACQ,kBAAC,IAAD,CAAUxC,GAAK,MAGtB,yBAAKf,GAAK,QAAQE,UAAY,IAC1B,yBAAKA,UAAY,gBACb,0BAAMuD,SAAUJ,KAAKP,iBACjB,yBAAK5C,UAAU,cACX,2BAAOc,QAAQ,YAAf,YACA,2BAAOc,KAAK,OAAO4B,SAAW,WAAWpC,MAAO+B,KAAKL,MAAMC,SAAU/B,SAAY,SAACC,GAAD,OAAO,EAAKwB,aAAaxB,IAAIjB,UAAU,eAAeF,GAAG,WAAW6C,KAAK,WAAWc,YAAY,oBAErL,yBAAKzD,UAAU,cACX,2BAAOc,QAAQ,YAAf,YACA,2BAAOc,KAAK,WAAW4B,SAAW,WAAWpC,MAAO+B,KAAKL,MAAME,SAAUhC,SAAY,SAACC,GAAD,OAAO,EAAKwB,aAAaxB,IAAIjB,UAAU,eAAeF,GAAG,WAAW6C,KAAO,WAAWc,YAAY,oBAGvLH,EAAaI,SACT,yBAAK1D,UAAY,4BACZsD,EAAaI,SAG1B,yBAAK1D,UAAY,eAEb,4BAAQ4B,KAAK,SAAS5B,UAAU,kBAAkB2D,SAAYP,GAA9D,kBA5C5B,GAA2B1C,IAAMkD,WC+ClB3B,cAxCS,SAACC,GAAW,IAAD,EACDA,EAAM2B,sBAEpC,MAAO,CACHT,UAJ2B,EACxBA,UAGQC,SAJgB,EACbA,SAGOC,aAFFpB,EAAhBoB,eAMgB,SAAClB,GACxB,MAAO,CACHa,MAAQ,SAASa,GAAO,IAAD,OACnB1B,EFhBD,CACHR,KAAOhD,IEiBHmF,WAAW,YCrBR,SAAUD,GACjB,OAAGA,EAAKd,WAAa5D,GAAwB0E,EAAKf,WAAa3D,EACpD4E,QAAQC,QAAQH,GAEhBE,QAAQE,OAAO,CAACC,aAAa,uCDkBhCC,CAAaN,GACZO,KAAK,SAAAC,GAGF,EAAKC,gBAAgBD,KAExBE,MAAM,SAAAC,GAGH,EAAKC,aAAaD,EAASN,iBAE/B,MAERO,aAAe,SAAShB,GACpBtB,EFCL,SAAesB,GAClB,MAAO,CACH9B,KAAM3C,EACNqD,QAASoB,GEJIiB,CAAMjB,IACftB,EFvBD,CACHR,KAAO9C,KEwBPyF,gBAAkB,SAASK,GACvBxC,EFjCL,SAAyBwC,GAC5B,MAAM,CACFhD,KAAO/C,EACPyD,QAAUsC,GE8BGC,CAAgBD,KAE7B1B,OAAS,WACLd,EFxBD,CACHR,KAAO7C,OE4BAkD,CA1CQ,SAACM,GAAD,OAAW,kBAAC,EAAUA,KENhCuC,EAAQ,WACjB,OACI,gCACI,iF,QCmBNC,EAAqB9C,YANH,SAACC,GACrB,MAAO,CACH8C,KAAO9C,EAAM2B,sBAAsBmB,OAIS,GAAzB/C,CApBN,SAAC,GAA8C,IAAhC2B,EAA+B,EAA3CqB,UAAgCC,GAAW,EAApBC,KAAoB,qCAI/D,OAAiB,OAAdD,EAAKF,KAEG,kBAAC,IAAD,iBAAWE,EAAX,CAAiBE,OAAW,SAAA7C,GAAK,OAAI,kBAACqB,EAAcrB,OAGpD,kBAAC,IAAD,CAAU1B,GAAK,aCFxBwE,E,YAEF,WAAY9C,GAAQ,IAAD,6BACf,4CAAMA,IACN7D,EAAQ4G,OAAQ,WACZ,EAAK/C,MAAMgD,UAEf,EAAKhD,MAAMgD,QALI,E,sEASf,OACI,6BACI,kBAAC,IAAD,CAAQ7G,QAASA,EAAS8G,SAAUC,qBAChC,kBAAC,IAAD,KACI,kBAAC,EAAD,CAAcC,OAAK,EAACP,KAAQ,IAAKF,UAAWU,IAC5C,kBAAC,IAAD,CAAOR,KAAQ,SAAUF,UAAWW,IACpC,kBAAC,IAAD,CAAOT,KAAM,KAAKF,UAAWH,W,GAjBnCpE,IAAMkD,WAsClBiC,EAAe5D,YAbG,SAACC,GACrB,MAAO,CACJ4D,cAAgB5D,EAAM4D,gBAGF,SAAC1D,GACxB,MAAO,CACHmD,MAAQ,WACJnD,ENED,CACHR,KAAM1C,OMEO+C,CAA6CoD,G,4kBC/ClE,IAAMU,EAAe,CACjBf,KAAO,M,YCDLe,EAAe,CACjBtF,WAAa,ICMjB,IAAMuF,EAAaC,YAAgB,CAC/B3C,aCRG,WAA4C,IAArBR,EAAoB,uDAAZ,GAAIoD,EAAQ,uCAC9C,OAAQA,EAAOtE,MACX,KAAK5C,EACD,MAAO,CACH4C,KAAM,gBACN8B,QAASwC,EAAO5D,SAExB,KAAKrD,EACD,MAAO,CACH2C,KAAM,eACN8B,QAASwC,EAAO5D,SAExB,KAAKpD,EACD,MAAO,GACX,QACI,OAAO4D,IDPDe,sBFJX,WAA+D,IAA/Bf,EAA8B,uDAAtBiD,EAAcG,EAAQ,uCACjE,OAAQA,EAAOtE,MACX,KAAKhD,EACD,OAAO,EAAP,GACOkE,EADP,CAEIM,WAAW,IAEnB,KAAKvE,EACD,MAAO,CACHwE,UAAU,EACV2B,KAAMkB,EAAO5D,SAErB,KAAKxD,EACD,OAAO,EAAP,GACOgE,EADP,CAEIM,WAAY,IAEpB,KAAKrE,EACD,MAAO,CACHiG,KAAO,MAEf,QACI,OAAOlC,IElBsBX,kBDJlC,WAA2D,IAA/BW,EAA8B,uDAAtBiD,EAAcG,EAAQ,uCAC7D,OAAQA,EAAOtE,MACX,KAAKzC,EACD,MAAO,CAEHsB,WAAU,sBAAOqC,EAAMrC,YAAb,CAAyByF,EAAO5D,WAElD,QACI,OAAOQ,MCSbqD,EEvBmB,WACrB,IACI,IAAMC,EAAkBC,eAAeC,QAAQ,SAE/C,GAAuB,OAApBF,EACC,OAEJ,OAAOG,KAAKC,MAAMJ,GACpB,MAAOK,GACL,QFceC,GAWRxE,EARDyE,YAbM,SAAC7D,EAAOoD,GAMxB,OALIA,EAAOtE,OAAS7C,IAClB+D,OAAQ8D,GAIHZ,EAAWlD,EAAOoD,IASzBC,EACAU,YACIC,M,MGnBR5E,EAAM6E,UAAU,WACZ,IAAIC,EAAe9E,EAAM+E,YDCJ,SAACnE,GAEtB,IACI,IAAMsD,EAAkBG,KAAKW,UAAUpE,GACvCuD,eAAec,QAAQ,QAASf,GAClC,MAAOK,GAELW,QAAQC,IAAIZ,ICJhBa,CAAsD,OAA5CN,EAAanD,sBAAsBmB,KAAgB,GAAKgC,KAGtEO,IAASnC,OACL,kBAAC,IAAD,CAAUlD,MAASA,GACf,kBAAC,EAAD,OAEFsF,SAASC,eAAe,W","file":"static/js/main.a8f10599.chunk.js","sourcesContent":["import { createBrowserHistory } from 'history';\r\n\r\nexport const history = createBrowserHistory();","export const    LOGIN_REQUEST = 'LOGIN_REQUEST';\r\nexport const    LOGIN_SUCCESS = 'LOGIN_SUCCESS';\r\nexport const    LOGIN_FAILURE = 'LOGIN_FAILURE';\r\nexport const    USER_LOGOUT = 'USER_LOGOUT';\r\n\r\nexport const  SUCCESS = 'SUCCESS';\r\nexport const  ERROR = 'ERROR';\r\nexport const  CLEAR = 'CLEAR';\r\n\r\nexport const SET_SELECTION = 'SET_SELECTION'","export const credentials = {\r\n    username : \"shaadi\",\r\n    password : \"123\"\r\n}\r\n\r\nexport const selectOptions = ['Select a number','one','two','three','four',\r\n'five','six','seven','eight','nine','ten','eleven','twelve',\r\n'thirteen', 'fourteen','fifteen','sixteen', 'seventeen','eighteen','nineteen','twenty'\r\n];","import React from 'react'\r\nimport {selectOptions} from './../_helpers/constantData';\r\n\r\nexport const Carousal = ({slideCount}) => {\r\n\r\n    const renderSlides = () =>{\r\n        let rand = Math.random(), slides = []\r\n        if(slideCount) {\r\n            for(let i = 0; i < slideCount; i++) {\r\n                slides.push(\r\n                    <div id = {rand+i} key = {rand+i} className={ `carousel-item ${i===0 ? 'active' : ''}` }>\r\n                        <div className = \"content\">\r\n                            <h3>Slide {selectOptions[i+1]}</h3>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            }\r\n        }\r\n        return slides;\r\n    }\r\n    \r\n    let slides = renderSlides()\r\n    return (\r\n        <div className = \"carousal-wrapper\">\r\n            <div id=\"carouselExampleControls\" className=\"carousel slide\" data-interval=\"false\">\r\n                <div className=\"carousel-inner\">\r\n                    {slides}\r\n                </div>\r\n                <a className=\"carousel-control-prev\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"prev\">\r\n                    <span className=\"carousel-control-prev-icon\" aria-hidden=\"true\"></span>\r\n                    <span className=\"sr-only\">Previous</span>\r\n                </a>\r\n                <a className=\"carousel-control-next\" href=\"#carouselExampleControls\" role=\"button\" data-slide=\"next\">\r\n                    <span className=\"carousel-control-next-icon\" aria-hidden=\"true\"></span>\r\n                    <span className=\"sr-only\">Next</span>\r\n                </a>\r\n            </div> \r\n        </div>\r\n    )\r\n    \r\n}","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport {Carousal} from './Carousal';\r\nimport {selectOptions} from './../_helpers/constantData';\r\n\r\n//destructuring only those props which are required\r\nexport const Home = ({setSelections, selections}) => {\r\n\r\n    //using Hooks coz the state is minimal\r\n    const [slideCount, setSlideCount] = React.useState(0)\r\n\r\n    const handleSelectChange = (e) => {\r\n        let newSlideCount = e.target.value\r\n        if(newSlideCount>0) {\r\n            //call the dispatcher from parent container component\r\n            setSelections(newSlideCount)\r\n        }\r\n        setSlideCount(newSlideCount)\r\n    }\r\n\r\n    return(\r\n        <div id = \"home\">\r\n\r\n            {/* The user gets logged out by clicking on this button */}\r\n            <div className = \"log-out\">\r\n                <Link className=\"btn btn-warning\" to =\"/login\" role=\"button\">Log Out</Link>\r\n            </div>\r\n\r\n            {/* This lets user to choose the slideCount, defaults to zero */}\r\n            <div className = \"select-wrapper\">\r\n                <div className = \"form-group\">\r\n                    <label htmlFor=\"numSelect\">Select Number of Slides</label>\r\n                    <select className=\"form-control\" defaultValue={ selectOptions[0] } id=\"numSelect\" onChange = {handleSelectChange}>\r\n                        {\r\n                            selectOptions.map((numText, index) => \r\n                                index === 0 ? <option key = {index} value={index}>{numText}</option> : \r\n                                <option key = {index} value={index}>{index}</option>\r\n                            )\r\n                        }\r\n                    </select>\r\n                </div>\r\n            </div>\r\n\r\n            {/* If the count that user has chosen is greater than zero, then only display the Carousal component */}\r\n            {\r\n                slideCount > 0 && \r\n                <Carousal slideCount = {slideCount}/>\r\n            }\r\n\r\n            {/* This button fires the selectionsModal */}\r\n            <button className = \"btn btn-primary\" data-toggle=\"modal\" data-target=\"#selectionsModal\">Finish</button>\r\n            \r\n            <div className=\"modal fade\" id=\"selectionsModal\" tabIndex=\"-1\" role=\"dialog\" aria-labelledby=\"selectionsModalTitle\" aria-hidden=\"true\">\r\n                <div className=\"modal-dialog\" role=\"document\">\r\n                    <div className=\"modal-content\">\r\n                        <div className=\"modal-header\">\r\n                            <h5 className=\"modal-title\" id=\"selectionsModalLongTitle\">Selections made</h5>\r\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\r\n                                <span aria-hidden=\"true\">&times;</span>\r\n                            </button>\r\n                        </div>\r\n                        <div className=\"modal-body\">\r\n                            {\r\n                                //if there are values in selections array then render the list\r\n                                selections.length ?\r\n                                    selections.map( (selection, index) => \r\n                                        <span key = {index}>\r\n                                            {selection}\r\n                                            {index === selections.length-1 ? '' : ','}&nbsp;\r\n                                        </span>                                     \r\n                                    )\r\n                                //else display this string\r\n                                : 'No selections made'\r\n                            }\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n    \r\n}","import React from 'react'\r\nimport {Home} from './../components/Home'\r\nimport { connect } from 'react-redux'\r\nimport { setSelections } from '../_actions/redux.actions';\r\n\r\nconst HomeContainer = (props) => <Home {...props}/>\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        selections : store.selectionsReducer.selections\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        setSelections : function(num) {\r\n            dispatch(setSelections(num))\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(HomeContainer)","import { LOGIN_SUCCESS, LOGIN_REQUEST, LOGIN_FAILURE, USER_LOGOUT, SET_SELECTION,\r\n    SUCCESS, ERROR, CLEAR\r\n} from \"../_constants/redux.contants\";\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\nexport function loginRequest() {\r\n    return {\r\n        type : LOGIN_REQUEST\r\n    }\r\n}\r\nexport function loginSuccessful(userObj) {\r\n    return{\r\n        type : LOGIN_SUCCESS,\r\n        payload : userObj\r\n    }\r\n}\r\nexport function loginFailure() {\r\n    return {\r\n        type : LOGIN_FAILURE\r\n    }\r\n}\r\nexport function userLogout() {\r\n    return {\r\n        type : USER_LOGOUT\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\nexport function setSelections(selectionId) {\r\n    return {\r\n        type : SET_SELECTION,\r\n        payload : selectionId\r\n    }\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////\r\nexport function success(message) {\r\n    return { \r\n        type: SUCCESS, \r\n        message: message\r\n    };\r\n}\r\nexport function error(message) {\r\n    return { \r\n        type: ERROR, \r\n        payload: message\r\n    };\r\n}\r\nexport function clear() {\r\n    return { \r\n        type: CLEAR \r\n    };\r\n}\r\n//////////////////////////////////////////////////////////////////////////////////////////","import React from 'react';\r\nimport {  Redirect } from 'react-router-dom';\r\n\r\nexport class Login extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.props.logout();\r\n        this.state = {\r\n            username : \"\",\r\n            password : \"\"\r\n        }\r\n    }\r\n\r\n    handleChange = (e) => this.setState({ [e.target.name] : e.target.value })\r\n\r\n    submitLoginForm = (e) => {\r\n        e.preventDefault()\r\n        const {username, password} = this.state\r\n        this.props.login({username, password})\r\n    }\r\n\r\n    render() {\r\n        const {loggingIn, loggedIn, alertReducer} = this.props;\r\n        if(loggedIn) {\r\n            return <Redirect to = '/'/>\r\n        }\r\n        return(\r\n            <div id = \"login\" className = \"\">\r\n                <div className = \"form-wrapper\">\r\n                    <form onSubmit={this.submitLoginForm}>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"username\">Username</label>\r\n                            <input type=\"text\" required = \"required\" value={this.state.username} onChange = {(e) => this.handleChange(e)} className=\"form-control\" id=\"username\" name=\"username\" placeholder=\"Enter username\"/>\r\n                        </div>\r\n                        <div className=\"form-group\">\r\n                            <label htmlFor=\"password\">Password</label>\r\n                            <input type=\"password\" required = \"required\" value={this.state.password} onChange = {(e) => this.handleChange(e)} className=\"form-control\" id=\"password\" name = \"password\" placeholder=\"Enter password\"/>\r\n                        </div>\r\n                        {\r\n                            alertReducer.message &&\r\n                                <div className = \"form-group alert-message\">\r\n                                    {alertReducer.message}\r\n                                </div>\r\n                        }\r\n                        <div className = \"text-center\">\r\n                            {/* If the user is being logged in then the button should be disabled */}\r\n                            <button type=\"submit\" className=\"btn btn-primary\" disabled = {loggingIn}>\r\n                                Log In\r\n                            </button>\r\n                        </div>\r\n                    </form>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport {Login} from './../components/Login';\r\n\r\nimport { connect } from 'react-redux';\r\nimport { loginRequest, loginSuccessful, loginFailure, error, userLogout } from '../_actions/redux.actions';\r\n\r\nimport dummyAPICall from './../_helpers/dummyAPICall';\r\n\r\nconst LoginContainer = (props) => <Login {...props}/>\r\n\r\nconst mapStateToProps = (store) => {\r\n    const {loggingIn, loggedIn} = store.authenticationReducer;\r\n    const {alertReducer} = store\r\n    return {\r\n        loggingIn, loggedIn, alertReducer\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        login : function(data) {\r\n            dispatch(loginRequest());\r\n            //mimic the api calling using setTimout\r\n            setTimeout(() => { \r\n                dummyAPICall(data)\r\n                .then(response => {\r\n                    // console.log('in then for dummyAPICall------------------------------')\r\n                    // console.log(response)\r\n                    this.loginsuccessful(response)\r\n                })\r\n                .catch(errorObj => {\r\n                    // console.log('in catch for dummyAPICall------------------------------')\r\n                    // console.log(errorObj)\r\n                    this.loginFailure(errorObj.errorMessage)\r\n                })\r\n            } , 2000)\r\n        },\r\n        loginFailure : function(message) {\r\n            dispatch(error(message));\r\n            dispatch(loginFailure());\r\n        },\r\n        loginsuccessful : function(userObj) {\r\n            dispatch(loginSuccessful(userObj));\r\n        },\r\n        logout : function() {\r\n            dispatch(userLogout())\r\n        }\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(LoginContainer)","import {credentials} from './constantData'\r\n\r\nexport default function (data) {\r\n        if(data.password === credentials.password && data.username === credentials.username) {\r\n            return Promise.resolve(data)\r\n        } else {\r\n            return Promise.reject({errorMessage:'Username or Password is incorrect'})\r\n        }\r\n}","import React from 'react'\r\n\r\nexport const Error = () => {\r\n    return (\r\n        <center>\r\n            <h4>404 - The page you are looking for is not found</h4> \r\n        </center>\r\n    )\r\n}","import React from 'react';\r\nimport { Route, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux'\r\n\r\nconst PrivateRoute = ({ component : Component, path, ...rest }) => {\r\n\r\n    //console.log(rest)\r\n    //computedMatch, exact, location, user\r\n    if(rest.user !== null) {\r\n        //if the user object is there, then render the component designated for this route\r\n        return <Route {...rest} render = { props => <Component {...props} /> } />\r\n    } else {\r\n        //else redirect the to error page\r\n        return <Redirect to = '/login'/>\r\n    }\r\n    \r\n};\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n        user : store.authenticationReducer.user\r\n    }\r\n}\r\n\r\nconst connectedComponent = connect(mapStateToProps, {})(PrivateRoute);\r\nexport { connectedComponent as PrivateRoute }; ","import React from 'react'\r\nimport { connect } from 'react-redux'\r\nimport {history} from './../_helpers/history'\r\nimport {Router, Switch, Route} from 'react-router-dom'\r\nimport {clear} from './../_actions/redux.actions'\r\n\r\nimport HomeContainer from './../containers/HomeContainer'\r\nimport LoginContainer from './../containers/LoginContainer'\r\nimport {Error} from './Error'\r\nimport {PrivateRoute} from './../HOC/PrivateRoute'\r\n\r\nclass App extends React.Component {\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        history.listen( () => {\r\n            this.props.clear();\r\n        });\r\n        this.props.clear();\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Router history={history} basename={process.env.PUBLIC_URL}>\r\n                    <Switch>\r\n                        <PrivateRoute exact path = {\"/\"} component={HomeContainer}  />\r\n                        <Route path = {\"/login\"} component={LoginContainer} />\r\n                        <Route path =\"/*\" component={Error} /> \r\n                    </Switch>\r\n                </Router>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (store) => {\r\n    return {\r\n       loaderReducer : store.loaderReducer\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        clear : function() {\r\n            dispatch(clear());\r\n        }\r\n    }\r\n}\r\n\r\nconst connectedApp = connect(mapStateToProps, mapDispatchToProps)(App);\r\nexport { connectedApp as App }; ","import { LOGIN_REQUEST, LOGIN_SUCCESS, LOGIN_FAILURE, USER_LOGOUT } from './../_constants/redux.contants';\r\n\r\nconst initialState = {\r\n    user : null\r\n}\r\n\r\nexport function authenticationReducer (state = initialState, action) {\r\n    switch (action.type) {\r\n        case LOGIN_REQUEST:\r\n            return {\r\n                ...state,\r\n                loggingIn: true,\r\n            };\r\n        case LOGIN_SUCCESS:\r\n            return {\r\n                loggedIn: true,\r\n                user: action.payload\r\n            };\r\n        case LOGIN_FAILURE:\r\n            return {\r\n                ...state,\r\n                loggingIn : false\r\n            };\r\n        case USER_LOGOUT:\r\n            return {\r\n                user : null\r\n            };\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\n\r\n","import { SET_SELECTION } from \"../_constants/redux.contants\";\r\n\r\nconst initialState = {\r\n    selections : []\r\n}\r\n\r\nexport function selectionsReducer (state = initialState, action) {\r\n    switch (action.type) {\r\n        case SET_SELECTION:\r\n            return {\r\n                //spread the previous things and add the incoming one as well\r\n                selections : [...state.selections, action.payload]\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}","import {createStore, combineReducers, applyMiddleware} from 'redux';\r\nimport {loadState} from './localStorage';\r\nimport  logger   from 'redux-logger';\r\n\r\nimport {alertReducer} from './../_reducers/alert.reducer';\r\nimport {authenticationReducer} from './../_reducers/auth.reducer';\r\nimport {selectionsReducer} from './../_reducers/selections.reducer';\r\nimport { USER_LOGOUT } from '../_constants/redux.contants';\r\n\r\nconst appReducer = combineReducers({\r\n    alertReducer, authenticationReducer, selectionsReducer\r\n})\r\n\r\nconst rootReducer = (state, action) => {\r\n    if (action.type === USER_LOGOUT) {\r\n      state = undefined;\r\n      //console.log('User Logout in root reducer');\r\n    }\r\n    //whenever USER_LOGOUT fires, all reducers will be initialized anew\r\n    return appReducer(state, action);\r\n}\r\n\r\n//retrieve the state (if any) on every reload\r\nconst persistedStore = loadState();\r\n//console.log('persistedStore : ', persistedStore)\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    persistedStore,\r\n    applyMiddleware(\r\n        logger\r\n    )\r\n)\r\n\r\nexport default store;","import { SUCCESS, ERROR, CLEAR } from './../_constants/redux.contants';\r\n\r\nexport function alertReducer (state = {}, action) {\r\n    switch (action.type) {\r\n        case SUCCESS:\r\n            return {\r\n                type: 'alert-success',\r\n                message: action.payload\r\n            };\r\n        case ERROR:\r\n            return {\r\n                type: 'alert-danger',\r\n                message: action.payload\r\n            };\r\n        case CLEAR:\r\n            return {};\r\n        default:\r\n            return state\r\n    }\r\n}","export const loadState = () => {\r\n    try {\r\n        const serializedState = sessionStorage.getItem('state');\r\n        //console.log('loadState has retrieved state : ', JSON.parse(serializedState))\r\n        if(serializedState === null) {\r\n            return undefined;\r\n        }\r\n        return JSON.parse(serializedState);\r\n    } catch (err) {\r\n        return undefined;\r\n    }\r\n};\r\n\r\nexport const saveState = (state) => {\r\n    //console.log('saveState has received state : ', state)\r\n    try {\r\n        const serializedState = JSON.stringify(state);\r\n        sessionStorage.setItem('state', serializedState);\r\n    } catch (err) {\r\n        //console logging the error\r\n        console.log(err);\r\n    }\r\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {App} from  './components/App';\n\nimport { Provider } from 'react-redux';\nimport store from './_helpers/store.js';\nimport {saveState} from './_helpers/localStorage.js';\n\nimport './assets/css/styles.css';\n\n//store.subscribe is fired everytime some change is made in the store\nstore.subscribe(() => {\n    let currentState = store.getState();\n    //console.log('current state authenticationReducer : ', currentState.authenticationReducer );\n    //if the authentication reducer has a value of undefined then there is no need to save anything in the sessionStoprage\n    //else the current store should be saved in sessionStorage (so it can be retrieved after reload -- in store.js)\n    saveState(currentState.authenticationReducer.user === null ? {} : currentState);\n});\n\nReactDOM.render(\n    <Provider store = {store}>\n        <App />\n    </Provider>\n    , document.getElementById('root')\n);\n"],"sourceRoot":""}